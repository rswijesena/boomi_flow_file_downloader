!function(t){function e(n){if(o[n])return o[n].exports;var r=o[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,e),r.l=!0,r.exports}var o={};e.m=t,e.c=o,e.d=function(t,o,n){e.o(t,o)||Object.defineProperty(t,o,{configurable:!1,enumerable:!0,get:n})},e.n=function(t){var o=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(o,"a",o),o},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=0)}([function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var o in t)e.hasOwnProperty(o)||(e[o]=t[o])}(o(1))},function(t,e,o){"use strict";function n(){var t=[];for(var e in manywho.OutcomeTimers){var o=manywho.OutcomeTimers[e];o&&t.push(r(o))}Promise.all(t)}function r(t){return t.startCounting(),!0}var i=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o])};return function(e,o){function n(){this.constructor=e}t(e,o),e.prototype=null===o?Object.create(o):(n.prototype=o.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0}),manywho.OutcomeTimers={},manywho.CustomComponentOrchestrator?manywho.CustomComponentOrchestrator.doneSendHandlers.push(n):manywho.settings.initialize({},{invoke:{done:n}});var s=o(2);o(3);var a=function(t){function e(e){var o=t.call(this,e)||this;o.componentId="",o.flowKey="",o.attributes=new Map,o.timerId=-1,o.timerCounter=0,o.componentId=e.id,o.flowKey=e.flowKey;var n=manywho.model.getComponent(o.componentId,o.flowKey);if(n.attributes)for(var r in n.attributes)o.attributes.set(r,n.attributes[r]);return n.objectData&&n.objectData[0]&&manywho.state.setComponent(o.componentId,{objectData:[n.objectData[0]]},o.flowKey,!0),o}return i(e,t),e.prototype.getAttribute=function(t,e){return this.attributes.has(t)?this.attributes.get(t):e},e.prototype.componentDidMount=function(){manywho.OutcomeTimers[this.componentId]=this,this.startCounting()},e.prototype.componentWillUnmount=function(){clearInterval(this.timerId),this.timerId=-1},e.prototype.startCounting=function(){this.timerCounter=0,this.timerId=window.setInterval(this.timerHandler.bind(this),1e3)},e.prototype.timerHandler=function(){var t=manywho.state.getComponent(this.componentId,this.flowKey);if(t&&t.loading)this.timerCounter=0,this.forceUpdate();else if(this.timerCounter<parseInt(this.getAttribute("refreshIntervalSeconds",10)))this.timerCounter++,this.forceUpdate();else{this.timerCounter=0,this.timerId>=-1&&(clearInterval(this.timerId),this.timerId=-1);var e=this.getAttribute("refreshOutcomeId","");if(e&&e.length>0&&"null"!=e.toLowerCase()){var o=manywho.model.getOutcome(e,this.flowKey);return!o||manywho.component.onOutcome(o,null,this.flowKey)}var n=this.getAttribute("refreshComponentId","");if(n&&n.length>0){var r=this,i=manywho.model.getComponent(this.props.id,this.props.flowKey).objectDataRequest;manywho.engine.objectDataRequest(this.props.id,i,this.props.flowKey,0,null,null,null,null).then(function(){var t=manywho.model.getComponent(n,r.props.flowKey);t&&(t.objectData=manywho.model.getComponent(r.props.id,r.props.flowKey).objectData,manywho.engine.render(r.props.flowKey))})}}},e.prototype.render=function(){var t=parseInt(this.getAttribute("refreshIntervalSeconds",10))-this.timerCounter;return s.createElement("div",null,"Triggering outcome in ",t," seconds")},e}(s.Component);manywho.component.register("OutcomeTimer",a),e.default=a},function(t,e){t.exports=React},function(t,e){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,